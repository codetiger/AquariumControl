{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","deepPurple","BasicExample","handleChange","port","event","controls","state","target","checked","domainName","window","location","protocol","hostname","fetch","method","headers","body","JSON","stringify","status","4","6","bind","then","res","json","data","setState","catch","e","console","log","setTimeout","this","fetchData","ThemeProvider","className","AppBar","position","color","Toolbar","Typography","variant","Object","entries","map","key","value","List","ListItem","ListItemAvatar","Avatar","ListItemText","secondary","Switch","id","onChange","Divider","Component","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mXAmBMA,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAASC,OAIQC,E,kDACnB,aAAe,IAAD,8BACZ,gBAsBFC,aAAe,SAAAC,GAAI,OAAI,SAAAC,GACrB,IAAMC,EAAW,EAAKC,MAAMD,SAEzBF,KAAQE,IACTA,EAASF,GAAT,OAA2BC,EAAMG,OAAOC,SAExC,IAAIC,EAAaC,OAAOC,SAASC,SAAS,KAAKF,OAAOC,SAASE,UAAUH,OAAOC,SAASR,KAAO,IAAIO,OAAOC,SAASR,KAAM,IAC1HW,MAAML,EAAa,iBAAmBN,EAAM,CAC5CY,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,OAAQhB,EAAMG,OAAOC,cAnCzB,EAAKF,MAAQ,CAAED,SAAU,CAACgB,EAAE,CAAC,KAAO,aAAc,QAAS,GAAOC,EAAE,CAAC,KAAO,cAAe,QAAS,KACpG,EAAKpB,aAAe,EAAKA,aAAaqB,KAAlB,gBAHR,E,6CAMd,WAAa,IAAD,OACNd,EAAaC,OAAOC,SAASC,SAAS,KAAKF,OAAOC,SAASE,UAAUH,OAAOC,SAASR,KAAO,IAAIO,OAAOC,SAASR,KAAM,IAC1HW,MAAML,EAAa,iBAClBe,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEvB,SAAUsB,OAE3BE,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAEdG,WAAWC,KAAKC,UAAUZ,KAAKW,MAAO,O,+BAGxC,WACEA,KAAKC,c,oBAsBP,WAAU,IAAD,OACD9B,EAAW6B,KAAK5B,MAAMD,SAE5B,OACE,cAAC+B,EAAA,EAAD,CAAexC,MAAOA,EAAtB,SACE,sBAAKyC,UAAU,UAAf,UACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,UAAhC,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,wCAMFC,OAAOC,QAAQxC,GACdyC,KAAK,mCAAEC,EAAF,KAAOC,EAAP,YACJ,8BACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CAAoBZ,MAAM,gBAG9B,cAACa,EAAA,EAAD,CAActD,QAASiD,EAAK,KAAUM,UAAWN,EAAK,OACtD,cAACO,EAAA,EAAD,CACEC,GAAMT,EACNU,SAAU,EAAKvD,aAAa6C,GAC5BvC,QAASwC,EAAK,OACdR,MAAM,eAGV,cAACkB,EAAA,EAAD,qB,GA3EwBC,aCbtBC,QACW,cAA7BlD,OAAOC,SAASE,UAEe,UAA7BH,OAAOC,SAASE,UAEhBH,OAAOC,SAASE,SAASgD,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.b09ebcb5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Switch from '@material-ui/core/Switch';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport SettingsRemoteIcon from '@material-ui/icons/SettingsRemote';\n\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { deepPurple } from \"@material-ui/core/colors\";\n\nimport './App.css';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: deepPurple,\n  },\n});\n\nexport default class BasicExample extends Component {\n  constructor() {\n    super();\n    this.state = { controls: {4:{\"name\":\"Tank Light\", \"status\":true}, 6:{\"name\":\"Plant Light\", \"status\":false}} };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  fetchData() {\n    var domainName = window.location.protocol+'//'+window.location.hostname+(window.location.port ? ':'+window.location.port: '');\n    fetch(domainName + '/api/controls')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ controls: data })\n    })\n    .catch(e => {\n      console.log(e);\n    });\n    setTimeout(this.fetchData.bind(this), 5000);\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  handleChange = port => event => {\n    const controls = this.state.controls;\n\n    if(port in controls)\n      controls[port][\"status\"] = event.target.checked;\n\n      var domainName = window.location.protocol+'//'+window.location.hostname+(window.location.port ? ':'+window.location.port: '');\n      fetch(domainName + '/api/controls/' + port, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        status: event.target.checked,\n      })\n    })\n  };\n\n  render() {\n    const controls = this.state.controls;\n  \n    return (\n      <ThemeProvider theme={theme}>\n        <div className=\"example\">\n          <AppBar position=\"static\" color=\"primary\">\n            <Toolbar>\n              <Typography variant=\"h6\">\n                Aquarium Control Panel\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          {\n            Object.entries(controls)\n            .map( ([key, value]) => \n              <div>\n                <List>\n                  <ListItem>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <SettingsRemoteIcon color=\"primary\"/>\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary={value['name']} secondary={value['name']} />\n                    <Switch\n                      id = {key}\n                      onChange={this.handleChange(key)}\n                      checked={value['status']}\n                      color=\"primary\"\n                    />\n                  </ListItem>\n                  <Divider>\n\n                  </Divider>\n                </List>\n              </div>\n            )\n          }\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}